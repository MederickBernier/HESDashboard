// <auto-generated />
using System;
using HESDashboard.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HESDashboard.Migrations
{
    [DbContext(typeof(HesDbContext))]
    [Migration("20250622092600_AddSleepTrackingTable")]
    partial class AddSleepTrackingTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HESDashboard.Models.DailyMetric", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("BMI")
                        .HasColumnType("float");

                    b.Property<int?>("BMRKcal")
                        .HasColumnType("int");

                    b.Property<double?>("BloodSugarMgDl")
                        .HasColumnType("float");

                    b.Property<int?>("BodyAgeYears")
                        .HasColumnType("int");

                    b.Property<double?>("BodyFatMassLbs")
                        .HasColumnType("float");

                    b.Property<double?>("BodyFatPercent")
                        .HasColumnType("float");

                    b.Property<double?>("BodyTemperatureC")
                        .HasColumnType("float");

                    b.Property<string>("BodyType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<double?>("BoneMassLbs")
                        .HasColumnType("float");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("DiastolocBP")
                        .HasColumnType("int");

                    b.Property<int?>("HeartRate")
                        .HasColumnType("int");

                    b.Property<double?>("LeanBodyMassLbs")
                        .HasColumnType("float");

                    b.Property<double?>("MuscleMassLbs")
                        .HasColumnType("float");

                    b.Property<double?>("ProteinPercent")
                        .HasColumnType("float");

                    b.Property<int?>("PulseRate")
                        .HasColumnType("int");

                    b.Property<double?>("RestingOxygenPercent")
                        .HasColumnType("float");

                    b.Property<double?>("SkeletalMuscleMassLbs")
                        .HasColumnType("float");

                    b.Property<double?>("SubcutaneousFatPercent")
                        .HasColumnType("float");

                    b.Property<int?>("SystolicBP")
                        .HasColumnType("int");

                    b.Property<int?>("VisceralFat")
                        .HasColumnType("int");

                    b.Property<double?>("WaterPercent")
                        .HasColumnType("float");

                    b.Property<double?>("WeightLbs")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("DailyMetrics");
                });

            modelBuilder.Entity("HESDashboard.Models.GoalEvaluationResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("HesGoalId")
                        .HasColumnType("int");

                    b.Property<bool>("IsSatisfied")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("HesGoalId", "Date")
                        .IsUnique();

                    b.ToTable("GoalEvaluationResults");
                });

            modelBuilder.Entity("HESDashboard.Models.HesGoal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BehaviorTrigger")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConditionKey")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConditionValue")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("HesPhaseId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HesPhaseId");

                    b.ToTable("HesGoals");
                });

            modelBuilder.Entity("HESDashboard.Models.HesPhase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("HesPhases");
                });

            modelBuilder.Entity("HESDashboard.Models.HesPhaseExitCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConditionDescription")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ConditionKey")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConditionValue")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("HesPhaseId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMet")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("HesPhaseId");

                    b.ToTable("HesPhaseExitConditions");
                });

            modelBuilder.Entity("HESDashboard.Models.HesThreshold", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AlertMessage")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double?>("MaxValue")
                        .HasColumnType("float");

                    b.Property<string>("MetricKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double?>("MinValue")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Thresholds");
                });

            modelBuilder.Entity("HESDashboard.Models.Meal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Calories")
                        .HasColumnType("int");

                    b.Property<double?>("CarbsGrams")
                        .HasColumnType("float");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<double?>("FatGrams")
                        .HasColumnType("float");

                    b.Property<string>("MealType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Mood")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PlanRef")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<double?>("ProteinGrams")
                        .HasColumnType("float");

                    b.Property<int?>("SatietyAfter")
                        .HasColumnType("int");

                    b.Property<int?>("SatietyBefore")
                        .HasColumnType("int");

                    b.Property<string>("Substitutions")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("TimeLogged")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("HESDashboard.Models.MedicationCatalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DefaultDosage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UsualWithFood")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("MedicationCatalogs");
                });

            modelBuilder.Entity("HESDashboard.Models.MedicationEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DosageOverride")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicationCatalogId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeTaken")
                        .HasColumnType("datetime2");

                    b.Property<bool>("WithFood")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("MedicationCatalogId");

                    b.ToTable("MedicationEntries");
                });

            modelBuilder.Entity("HESDashboard.Models.SleepTrackingEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan?>("ActualSleepTime")
                        .HasColumnType("time");

                    b.Property<int?>("AvgHeartRate")
                        .HasColumnType("int");

                    b.Property<double?>("AvgRespiratoryRate")
                        .HasColumnType("float");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("EndOfSleep")
                        .HasColumnType("datetime2");

                    b.Property<double?>("HighestSkinTemp")
                        .HasColumnType("float");

                    b.Property<double?>("LowestBloodOxygen")
                        .HasColumnType("float");

                    b.Property<double?>("LowestSkinTemp")
                        .HasColumnType("float");

                    b.Property<double?>("PercentAwake")
                        .HasColumnType("float");

                    b.Property<double?>("PercentDeep")
                        .HasColumnType("float");

                    b.Property<double?>("PercentLight")
                        .HasColumnType("float");

                    b.Property<double?>("PercentREM")
                        .HasColumnType("float");

                    b.Property<DateTime?>("StartOfSleep")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("TimeAwake")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("TimeDeep")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("TimeLight")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("TimeREM")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("TotalTimeInBed")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("SleepTrackingEntries");
                });

            modelBuilder.Entity("HESDashboard.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("HESDashboard.Models.Training", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvgPace")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<double?>("AvgSpeedKmh")
                        .HasColumnType("float");

                    b.Property<int?>("CadenceAvg")
                        .HasColumnType("int");

                    b.Property<int?>("CadenceMax")
                        .HasColumnType("int");

                    b.Property<int?>("Calories")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<double?>("DistanceKm")
                        .HasColumnType("float");

                    b.Property<int>("DurationSeconds")
                        .HasColumnType("int");

                    b.Property<int?>("ElevationMaxM")
                        .HasColumnType("int");

                    b.Property<int?>("ElevationMinM")
                        .HasColumnType("int");

                    b.Property<int?>("HeartRateAvg")
                        .HasColumnType("int");

                    b.Property<int?>("HeartRateMax")
                        .HasColumnType("int");

                    b.Property<string>("MaxPace")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<double?>("MaxSpeedKmh")
                        .HasColumnType("float");

                    b.Property<int?>("MoodAfter")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("PainScore")
                        .HasColumnType("int");

                    b.Property<int?>("PerceivedExertion")
                        .HasColumnType("int");

                    b.Property<int?>("Repetitions")
                        .HasColumnType("int");

                    b.Property<int?>("Sets")
                        .HasColumnType("int");

                    b.Property<int?>("Steps")
                        .HasColumnType("int");

                    b.Property<int?>("TemperatureC")
                        .HasColumnType("int");

                    b.Property<string>("Timeframe")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<double?>("TotalAscentKm")
                        .HasColumnType("float");

                    b.Property<string>("TrainingType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("WaterMl")
                        .HasColumnType("int");

                    b.Property<string>("Weather")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<double?>("WeightKg")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Trainings", (string)null);
                });

            modelBuilder.Entity("HESDashboard.Models.GoalEvaluationResult", b =>
                {
                    b.HasOne("HESDashboard.Models.HesGoal", "Goal")
                        .WithMany()
                        .HasForeignKey("HesGoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goal");
                });

            modelBuilder.Entity("HESDashboard.Models.HesGoal", b =>
                {
                    b.HasOne("HESDashboard.Models.HesPhase", "Phase")
                        .WithMany("Goals")
                        .HasForeignKey("HesPhaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Phase");
                });

            modelBuilder.Entity("HESDashboard.Models.HesPhaseExitCondition", b =>
                {
                    b.HasOne("HESDashboard.Models.HesPhase", "Phase")
                        .WithMany("ExitConditions")
                        .HasForeignKey("HesPhaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Phase");
                });

            modelBuilder.Entity("HESDashboard.Models.MedicationEntry", b =>
                {
                    b.HasOne("HESDashboard.Models.MedicationCatalog", "Medication")
                        .WithMany("Entries")
                        .HasForeignKey("MedicationCatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medication");
                });

            modelBuilder.Entity("HESDashboard.Models.HesPhase", b =>
                {
                    b.Navigation("ExitConditions");

                    b.Navigation("Goals");
                });

            modelBuilder.Entity("HESDashboard.Models.MedicationCatalog", b =>
                {
                    b.Navigation("Entries");
                });
#pragma warning restore 612, 618
        }
    }
}
